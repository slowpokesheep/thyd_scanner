%{
  import java.io.*;
  import java.util.*;
%}

// Tokens
%token <sval> LITERAL, NAME
%token <sval> OPNAME_1 OPNAME_2 OPNAME_3 OPNAME_4 OPNAME_5 OPNAME_6 OPNAME_7 // Lexer deals with the priority
%token <sval> AND, OR

%token IF, ELSE, ELSIF, WHILE, VAR
%token RETURN, OPNAME

// Args and declarations
%type <ival> funargs
%type <ival> decls decl

// Operators
%type <sval> op

%type <obj> program function
%type <obj> exprs expr binoexpr smallexpr
%type <obj> orexpr andexpr notexpr
%type <obj> ifexpr elsebody
%type <obj> bin args body

// Precedence and associatives
%right RETURN
%left AND OR

%right '='
%left OPNAME_1 // ~
%right OPNAME_2 // :
%left OPNAME_3 // |
%left OPNAME_4 // &
%left OPNAME_5 // >
%left OPNAME_6 // -
%left OPNAME_7 // %

%left unop

%%

start
  : program { generateProgram(name, ((Vector<Object>)($1)).toArray()); }
  ;

program
  : program function { ((Vector<Object>)($1)).add($2); $$ = $1; } // Multiple functions
  | function { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); } // Single function
  ;

function
  : {
    varCount = 0;
    varTable = new HashMap<String, Integer>();
  }
  NAME '(' funargs ')' '{' decls exprs '}'
  { $$ = new Object[] { $2, $4, varCount, ((Vector<Object>)($8)).toArray() }; }

// Function arguements
funargs
  : { $$ = 0; } // Empty
  | funargs ',' NAME { addVar($3); $$ = $1 + 1; }
  | NAME { addVar($1); $$ = 1; }
  ;

// Declarations
decls
  : { $$ = 0; } // Empty
  | decls decl ';' { $$ = $1 + $2; }
  ;

decl
  : decl ',' NAME { addVar($3); $$ = $1 + 1; }
  | VAR NAME { addVar($2); $$ = 1; }
  ;

// Expressions
exprs
  : { $$ = new Vector<Object>(); } // Empty
  | exprs expr ';' { ((Vector<Object>)($1)).add($2); $$ = $1; }
  |
  ;

expr
  : RETURN expr { $$ = new Object[] { type.RETURN, $2 }; }
  | NAME '=' expr { $$ = new Object[] { type.STORE, findVar($1), $3 }; }
  | orexpr { $$ = $1; }
  ;

orexpr
  : orexpr OR andexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; }
  | andexpr { $$ = $1; }
  ;

andexpr
  : andexpr AND notexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; }
  | notexpr { $$ = $1; }
  ;

notexpr
  : '!' notexpr { $$ = new Object[] { type.CALL, '!', new Object[] { $2 } }; }
  | binoexpr { $$ = $1; }
  ;

binoexpr
  : binoexpr OPNAME_1 binoexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // ~
  | binoexpr OPNAME_2 binoexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // :
  | binoexpr OPNAME_3 binoexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // |
  | binoexpr OPNAME_4 binoexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // &
  | binoexpr OPNAME_5 binoexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // >
  | binoexpr OPNAME_6 binoexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // -
  | binoexpr OPNAME_7 smallexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; } // %
  | smallexpr { $$ = $1; }
  ;

smallexpr
  : NAME '(' args ')' { $$ = new Object[] { type.CALL, $1, ((Vector<Object>)($3)).toArray() }; }
  | NAME { $$ = new Object[] { type.FETCH, findVar($1) }; }
  | LITERAL { $$ = new Object[] { type.LITERAL, $1 }; }
  | op smallexpr %prec unop { $$ = new Object[] { type.CALL, $1, new Object[] { $2 } }; }
  | '(' expr ')' { $$ = $2; }
  | WHILE '(' expr ')' body { $$ = new Object[] { type.WHILE, $3, new Object[] { type.BODY, $5 } }; }
  | ifexpr { $$ = $1; }
  ;

// If statement
ifexpr
  : IF '(' expr ')' body elsebody { $$ = new Object[] { type.IF, $3, new Object[] { type.BODY, $5 }, $6 }; }
  ;

elsebody
  : { $$ = null; } // Empty
  | ELSIF '(' expr ')' body elsebody { $$ = new Object[] { type.IF, $3, new Object[] { type.BODY, $5 }, $6 }; }
  | ELSE body { $$ = new Object[] { type.IF, new Object[] { type.LITERAL, "true" }, new Object[] { type.BODY, $2}, null }; }
  ;

// Helpers
args
  : { $$ = new Vector<Object>(); } // Empty
  | args ',' expr { ((Vector<Object>)($1)).add($3); $$ = $1; }
  | expr { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
  ;

op
  : OPNAME_1 | OPNAME_2 | OPNAME_3 | OPNAME_4 | OPNAME_5 | OPNAME_6 | OPNAME_7
  ;

body
  : '{' exprs '}' { $$ = ((Vector<Object>)($2)).toArray(); }
  ;

%%

// GENERATE PROGRAM

// The symbol table consists of the following two variables.
private static int varCount;
private static HashMap<String,Integer> varTable;

private NanoMorphoLexer lexer;
private static PrintWriter writer;

private static String name;
private int last_token_read;


// Intermediate code element identification strings
enum type {
  RETURN, STORE, CALL, FETCH, LITERAL, IF, WHILE, BODY
}

// Adds a new variable to the symbol table.
// Throws Error if the variable already exists.
private void addVar(String name) {

  if (varTable.get(name) != null) {
    throw new Error("Variable "+name+" already exists, near line " + lexer.getLine() + 1);
  }
    varTable.put(name,varCount++);
}

// Finds the location of an existing variable.
// Throws Error if the variable does not exist.
private int findVar(String name) {
  Integer res = varTable.get(name);

  if (res == null) {
    throw new Error("Variable "+name+" does not exist, near line " + lexer.getLine() + 1);
  }
    return res;
}

private int yylex() {
  int yyl_return = -1;
  try {
    yylval = null;
    last_token_read = yyl_return = lexer.yylex();

    if (yylval == null ) {
      yylval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
    }
  }
  catch (IOException e) {
    System.err.println("IO error: " + e);
  }
  return yyl_return;
}

public void yyerror(String error) {
  System.out.println("Error:  " + error);
  System.out.println("Token:  " + NanoMorphoParser.yyname[last_token_read]);
  System.out.printf("Line: %d, Column: %d\n", lexer.getLine(), lexer.getColumn());
  System.exit(1);
}

// Helper

private static int nextLab = 0;

// Returns a new, previously unused, label.
// Useful for control-flow expressions.
static String newLabel() {
    return "_"+(nextLab++);
}

public int newIntLabel() {
  return nextLab++;
}

public void emit(String s) {
  //System.out.println(s);
  writer.println(s);
}

// Final code

public NanoMorphoParser(Reader r) {
  lexer = new NanoMorphoLexer(r, this);
}

public static void main(String args[]) throws IOException {
  NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
  name = args[0].substring(0, args[0].lastIndexOf('.'));

  writer = new PrintWriter(name + ".masm", "UTF-8");
  yyparser.yyparse();
  writer.close();
}

public void generateProgram(String programname, Object[] funs) {
  emit("\""+programname+".mexe\" = main in");
  emit("!");
  emit("{{");
  
  for (Object f: funs) {
    generateFunction((Object[]) f);
  }

  emit("}}");
  emit("*");
  emit("BASIS;");
}

// [functionName, argCount, varCount, exprs]
public void generateFunction(Object[] fun) {
  String functionName = (String) fun[0];
  int argCount = (Integer) fun[1];
  int varCount = (Integer) fun[2];
  Object[] exprs = (Object[]) fun[3];

  emit("#\"" +functionName+ "[f" +argCount+ "]\" =");
  emit("[");


  for (int i = 0; i < varCount; ++i) {
    emit("(MakeVal null)");
    emit("(Push)");
  }

  for (Object e: exprs) {
    generateExpr((Object[]) e);
  }


  emit("(Return)");
  emit("];");
}

// RETURN, STORE, CALL, FETCH, LITERAL, IF, WHILE, BODY
public void generateExpr(Object[] e) {

  switch((type) e[0]) {
    case RETURN: // ["RETURN", expr]
      generateExpr((Object[]) e[1]);
      emit("(Return)");
      break;
    case STORE: // ["STORE", pos, expr]
      generateExpr((Object[]) e[2]);
      emit("(Store "+e[1]+")");
      break;
    case CALL: // ["CALL", name, args]
      Object[] args = (Object[]) e[2];

      for (Object arg: args) {
        if (args.length == 0) generateExpr((Object[]) arg);
        else generateExprP((Object[]) arg);
      }

      emit("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
      break;
    case FETCH: // ["FETCH", pos]
      emit("(Fetch "+e[1]+")");
      break;
    case LITERAL:
      emit("(MakeVal "+e[1]+")");
      break;
    case IF: // ["IF", expr, expr, expr]
      
      int labelElse = newIntLabel();
      int labelEnd = newIntLabel();

      Object[] cond = (Object[]) e[1];
      Object[] then = (Object[]) e[2];

      generateJump(cond, 0, labelElse);
      generateExpr(then);

      emit("(Go _"+labelEnd+")");
      emit("_"+labelElse+":");

      Object[] els = (Object[]) e[3];
      if (els != null) {
        generateExpr(els);
      }

      emit("_"+labelEnd+":");
      break;
    case WHILE: // ["WHILE", expr, expr]
      String labelStart = newLabel();
      String labelStop = newLabel();

      emit("(Go "+labelStop+")");
      emit(""+labelStart+":");

      generateBody((Object[]) e[2]);

      emit(""+labelStop+":");

      generateExpr((Object[]) e[1]);
      emit("(GoTrue "+labelStart+")");
      break;
    case BODY: // ["BODY", expr]
      generateBody(e);
      break;
    default:
      throw new Error("Unknown token: " + e[0]);
  }
}

public void generateExprP(Object[] e) {
  switch((type) e[0]) {
    case CALL: // ["CALL", name, args]
      Object[] args = (Object[]) e[2];

      for (Object arg: args) {
        emit("(Push)");
        generateExpr((Object[]) arg);
      }

      if (args.length == 0) emit("(Push)");

      emit("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
      break;
    case FETCH: // ["FETCH", pos]
      emit("(FetchP "+e[1]+")");
      break;
    case LITERAL:
      emit("(MakeValP "+e[1]+")");
      break;
    default:
      throw new Error("Unknown token: " + e[0]);
  }
}

public void generateBody(Object[] e) {
  
  for (Object expr: (Object[]) e[1]) {
    generateExpr((Object[]) expr);
  }
}

public void generateJump(Object[] e, int labelTrue, int labelFalse) {

  switch((type) e[0]) {
    case LITERAL:
      String literal = (String) e[1];

      if (literal.equals("false") || literal.equals("null")) {
        if (labelFalse != 0) emit("(Go _"+labelFalse+")");
        return;
      }
      if (labelTrue != 0) emit("(Go _"+labelTrue+")");
      return;
    default:
      generateExpr(e);
      if (labelTrue != 0 ) emit("(GoTrue _"+labelTrue+")");
      if (labelFalse != 0 ) emit("(GoFalse _"+labelFalse+")");
  }
}