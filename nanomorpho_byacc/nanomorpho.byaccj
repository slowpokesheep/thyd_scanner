%{
  import java.io.*;
  import java.util.*;
%}

%token <sval> OPNAME
%token <sval> LITERAL, NAME
%token <sval> AND, OR, NOT

%token IF, ELSE, ELSIF, WHILE, VAR
%token RETURN, OPNAME


%type <obj> program function
%type <ival> funargs
%type <ival> decls decl

%type <obj> exprs expr binoexpr smallexpr
%type <obj> orexpr andexpr notexpr
%type <obj> ifexpr elsebody
%type <obj> args op body


// Precedence and associatives
%right '='
%right ':'
%right RETURN
%left OPNAME
%left AND OR

%%

start
  : program { generateProgram(name, ((Vector<Object>)($1)).toArray()); }
  ;

program
  : program function { ((Vector<Object>)($1)).add($2); $$ = $1; } // Multiple functions
  | function { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); } // Single function
  ;

function
  : {
    varCount = 0;
    varTable = new HashMap<String, Integer>();
  }
  NAME '(' funargs ')' '{' decls exprs '}'
  { $$ = new Object[] { $2, $4, varCount, ((Vector<Object>)($8)).toArray() }; }

funargs
  : { $$ = 0; } // Empty
  | funargs ',' NAME { addVar($3); $$ = $1 + 1; }
  | NAME { addVar($1); $$ = 1; }
  ;

// Declarations
decls
  : { $$ = 0; } // Empty
  | decls decl ';' { $$ = $1 + $2; }
  ;

decl
  : decl ',' NAME { addVar($3); $$ = $1 + 1; }
  | VAR NAME { addVar($2); $$ = 1; }
  ;

// Expressions
exprs
  : { $$ = new Vector<Object>(); } // Empty
  | exprs expr ';' { ((Vector<Object>)($1)).add($2); $$ = $1; }
  |
  //: exprs expr ';' { ((Vector<Object>)($1)).add($2); $$ = $1; }
  //| expr ';' { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
  ;

expr
  : orexpr { $$ = $1; }
  | NAME '=' expr { $$ = new Object[] { type.STORE, findVar($1), $3 }; }
  | RETURN expr { $$ = new Object[] { type.RETURN, $2 }; }
  ;

orexpr
  : orexpr OR andexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; }
  | andexpr { $$ = $1; }
  ;

andexpr
  : andexpr AND notexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; }
  | notexpr { $$ = $1; }
  ;

notexpr
  : '!' notexpr { $$ = new Object[] { type.CALL, '!', new Object[] { $2 } }; }
  | binoexpr { $$ = $1; }
  ;

binoexpr
  : smallexpr { $$ = $1; }
  | binoexpr OPNAME smallexpr { $$ = new Object[] { type.CALL, $2, new Object[] { $1, $3 } }; }
  ;

smallexpr
  : NAME { $$ = new Object[] { type.FETCH, findVar($1) }; }
  | NAME '(' args ')' { $$ = new Object[] { type.CALL, $1, ((Vector<Object>)($3)).toArray() }; }
  | LITERAL { $$ = new Object[] { type.LITERAL, $1 }; }
  | op smallexpr { $$ = new Object[] { type.CALL, $1, new Object[] { $2 } }; }
  | WHILE '(' expr ')' body { $$ = new Object[] { type.WHILE, $3, new Object[] { type.BODY, $5 } }; }
  | ifexpr { $$ = $1; }
  | '(' expr ')' { $$ = $2; }
  ;

// If statement
ifexpr
  : IF '(' expr ')' body elsebody { $$ = new Object[] { type.IF, $3, new Object[] { type.BODY, $5 }, $6 }; }
  ;

elsebody
  : { $$ = null; } // Empty
  | ELSIF '(' expr ')' body elsebody { $$ = new Object[] { type.IF, $3, new Object[] { type.BODY, $5 }, $6 }; }
  | ELSE body { $$ = new Object[] { type.IF, new Object[] { type.LITERAL, "true" }, new Object[] { type.BODY, $2}, null }; }
  ;

// Helpers
args
  : { $$ = new Vector<Object>(); } // Empty
  | args ',' expr { ((Vector<Object>)($1)).add($3); $$ = $1; }
  | expr { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
  ;

op
  : OPNAME { $$ = $1; }
  ;

body
  : '{' exprs '}' { $$ = ((Vector<Object>)($2)).toArray(); }
  ;

%%

private NanoMorphoLexer lexer;
// The symbol table consists of the following two variables.
private static int varCount;
private static HashMap<String,Integer> varTable;
static PrintWriter writer;

private static String name;
private int last_token_read;


// Intermediate code element identification strings
enum type {
  RETURN, STORE, OR, AND, NOT, CALL, FETCH, LITERAL, IF, WHILE, BODY
}

// Adds a new variable to the symbol table.
// Throws Error if the variable already exists.
private void addVar(String name) {

  if (varTable.get(name) != null) {
    throw new Error("Variable "+name+" already exists, near line " + lexer.getLine() + 1);
  }
    varTable.put(name,varCount++);
}

// Finds the location of an existing variable.
// Throws Error if the variable does not exist.
private int findVar(String name) {
  Integer res = varTable.get(name);

  if (res == null) {
    throw new Error("Variable "+name+" does not exist, near line " + lexer.getLine() + 1);
  }
    return res;
}

private int yylex() {
  int yyl_return = -1;
  try {
    yylval = null;
    last_token_read = yyl_return = lexer.yylex();

    if (yylval == null ) {
      yylval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
    }
  }
  catch (IOException e) {
    System.err.println("IO error: " + e);
  }
  return yyl_return;
}

public void yyerror(String error) {
  System.out.println("Error:  " + error);
  System.out.println("Token:  " + NanoMorphoParser.yyname[last_token_read]);
  System.out.printf("Line: %d, Column: %d\n", lexer.getLine(), lexer.getColumn());
  System.exit(1);
}

public NanoMorphoParser(Reader r) {
  lexer = new NanoMorphoLexer(r, this);
}

public static void main(String args[]) throws IOException {
  NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
  name = args[0].substring(0, args[0].lastIndexOf('.'));
  yyparser.yyparse();
}

// GENERATE - TODO FIX

private static int nextLab = 0;

// Returns a new, previously unused, label.
// Useful for control-flow expressions.
static String newLabel() {
    return "_"+(nextLab++);
}

public int newIntLabel() {
  return nextLab++;
}

public void print(String s) {
  System.out.println(s);
  //writer.println(s);
}

// Final code

public void generateProgram(String programname, Object[] funs) {
  print("\""+programname+".mexe\" = main in");
  print("!");
  print("{{");
  
  for (Object f: funs) {
    generateFunction((Object[]) f);
  }

  print("}}");
  print("*");
  print("BASIS;");
}

// [functionName, argCount, varCount, exprs]
public void generateFunction(Object[] fun) {
  String functionName = (String) fun[0];
  int argCount = (Integer) fun[1];
  int varCount = (Integer) fun[2];
  Object[] exprs = (Object[]) fun[3];

  print("#\"" +functionName+ "[f" +argCount+ "]\" =");
  print("[");


  for (int i = 0; i < varCount; ++i) {
    print("(MakeVal null)");
    print("(Push)");
  }

  for (Object e: exprs) {
    generateExpr((Object[]) e);
  }


  print("(Return)");
  print("];");
}

// RETURN, STORE, OR, AND, NOT, CALL, FETCH, LITERAL, IF, WHILE, BODY
public void generateExpr(Object[] e) {

  switch((type) e[0]) {
    case RETURN: // ["RETURN", expr]
      generateExpr((Object[]) e[1]);
      print("(Return)");
      break;
    case STORE: // ["STORE", pos, expr]
      generateExpr((Object[]) e[2]);
      print("(Store "+e[1]+")");
      break;
    case NOT: // ["NOT", expr]
      generateExpr((Object[]) e[1]);
      print("(Not)");
      break;
    case CALL: // ["CALL", name, args]
      Object[] args = (Object[]) e[2];

      for (Object arg: args) {
        print("(Push)");
        generateExpr((Object[]) arg);
      }

      print("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
      break;
    case FETCH: // ["FETCH", pos]
      print("(Fetch "+e[1]+")");
      break;
    case LITERAL:
      print("(MakeVal "+e[1]+")");
      break;
    case IF: // ["IF", expr, expr, expr]
      
      int labelElse = newIntLabel();
      int labelEnd = newIntLabel();

      Object[] then = (Object[]) e[2];

      if ((e[1] instanceof Boolean)) {
        generateExpr(then);
        print("(Go _"+labelEnd+")");
        print("_"+labelElse+":");
        print("_"+labelEnd+":");
        return;
      }
      Object[] cond = (Object[]) e[1];

      generateJump(cond, 0, labelElse);
      generateExpr(then);

      print("(Go _"+labelEnd+")");
      print("_"+labelElse+":");

      Object[] els = (Object[]) e[3];
      if (els != null) {
        generateExpr(els);
      }

      print("_"+labelEnd+":");
      break;
    case WHILE: // ["WHILE", expr, expr]
      String labelStart = newLabel();
      String labelStop = newLabel();

      print("(Go "+labelStop+")");
      print(""+labelStart+":");

      generateBody((Object[]) e[2]);

      print(""+labelStop+":");

      generateExpr((Object[]) e[1]);
      print("(GoTrue "+labelStart+")");
      break;
    case BODY: // ["BODY", expr]
      generateBody(e);
      break;
    default:
      break;
  }
}

public void generateBody(Object[] e) {
  
  for (Object expr: (Object[]) e[1]) {
    generateExpr((Object[]) expr);
  }
}

public void generateJump(Object[] e, int labelTrue, int labelFalse) {
  generateExpr(e);
  if (labelTrue != 0 ) print("(GoTrue _"+labelTrue+")");
  if (labelFalse != 0 ) print("(GoFalse _"+labelFalse+")");
}